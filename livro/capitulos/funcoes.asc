
////
Referencia:
INTRODUÇÃO À LINGUAGEM C
Versão 2.0

INTRODUÇÃO A LINGUAGEM C
GACLI - CENTRO DE COMPUTAÇÃO - UNICAMP
http://www.fsc.ufsc.br/~canzian/root/tutorial-c-unicamp.pdf


10. Programação Estruturada (Modularização)
http://www.facom.ufu.br/~gustavo/IC/Programacao/Apostila_Algoritmos.pdf

EMENTA de Introdução a Programação:

Histórico das linguagens de programação. 
Descrição e construção de algoritmos. 
Metodologia de programação. 
Introdução a uma linguagem de programação moderna: 
	tipos elementares e compostos de dados; 
	operadores;
	expressões e funções; 
	mecanismos de passagem de parâmetros; 
	variáveis e comandos; 
	procedimentos; recursividade; 
	tipos definidos pelo programador e
	tipos abstratos de dados; 
	noções de estruturas dinâmicas de dados.
Aplicações práticas.

*  9184-0366
http://www.cprogressivo.net/2013/02/O-que-e-para-que-serve-e-como-usar-e-declarar-funcao-em-C.html

////

== Funções

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Criar e usar funções e procedimentos em C
* Entender quando escrever uma função ou um procedimento
* Entender os diferentes tipos de passagem de parâmetro e quando utiliza-los
* Criar funções de ordem superior e homomorfismos
____________________

Quando elaboramos um algoritmo para resolver um problema, e quando 
escrevemos um programa para implementar este algoritmo, muitas vezes 
identificamos uma parte do algoritmo que deve ser realizada várias 
vezes para chegar ao resultado. Ou, ao trabalhar com vários algoritmos 
diferentes, identificamos algumas partes em comum entre eles. Nestes 
casos, é uma boa ideia isolar essas partes que se repetem de uma maneira 
que elas possam ser realizadas sem repetir o mesmo código várias vezes. 
Esse objetivo pode ser atingido com o uso de *funções* e *procedimentos*.

Neste capítulo vamos estudar as funções e procedimentos como uma forma 
de reaproveitar o código de tarefas que se repetem em um programa. Funções 
são importantes para a modularização de um programa, ou seja, para dividir
o programa em partes menores, cada parte com uma função específica; sem 
funções ou procedimentos um programa maior e mais complicado ficaria 
organizado em uma única parte que faz tudo e é mais difícil de entender. 
Neste capítulo vamos entender quando utilizar as funções ou procedimentos 
para melhor dividir o código dos nossos programas. 


[IMPORTANT]
====
Neste capítulo vamos *descartar a utilização de pseudocódigo*. Agora que você já
possui um conhecimento básico sobre a linguagem C e provavelmente escreveu alguns
programas nela, consideramos que não haverá mais necessidade de 
apresentar sintaxes para pseudocódigos. Portanto, neste capítulo em diante, o conteúdo 
apresentadao utilizará somente a sintaxe da linguagem C.
====



=== O que são funções

Uma função em C pode ser compreendida sobre diversos aspectos:

* as funções correspondem a abstrações para trechos de programas



[NOTE]
.Revisão
====
Lembre-se que durante o curso você já utilizou funções diversas vezes,
o que nós sabemos sobre funções até agora?

* Uma função implementa um comportamento que pode ser reutilizado;
* Para executar uma função, utilizamos o nome da função e passamos alguns 
parâmetros entre parênteses e separados por vírgula. Exemplo: `printf("R$ %1.2f", preco)`;
* A função `printf` é utilizada para imprimir texto na saída;
* As funções `scanf` e `getchar` para ler dados da entrada;
* As funções `strlen`, `strcpy`, `strcat` e `strchr` são utilizadas para 
manipular strings;
* As ((funções)) são agrupadas em ((bibliotecas)). Exemplo; `stdio`;
====



=== Criando funções para reutilizar código



Até agora os programas que escrevemos continham apenas a função `main`, e todo
nosso código era escrito dentro dela.


////
http://www.slideshare.net/MMSequeira/semana-2-6479012
-- funções não devem ter efeito colaterais
--- escrever no teclado

função sem parâmetro
função com parametros
função com retorno


C s ̃o procedimen-
co
co
a
tos que podem ser executados por outros c ́digos (outras fun ̧ ̃es)


////




=== Retorno de Valores 
texto.

=== Escopo de Variáveis 
texto.

=== Passagem de Parâmetros 
texto.

==== Por Valor
texto.

==== Por Referência
texto.

=== Reunindo tudo
texto.


Passing Arguments
Methods of Passing Arguments
Passing by Value
Passing by Address

Using Return Values and Prototypes
Returning Values
The Return Data Type
One Last Step: Prototype
Wrapping Things Up
Funções recursivas
