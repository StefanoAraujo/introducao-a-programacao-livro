== Registros

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Criar registros em C
* Manipular registros
____________________

Neste lugar você deve apresentar o conteúdo em forma de diálogo.

NOTE: Para começar a escrever um novo capítulo, copie este arquivo e 
salve com outro nome (não utilize espaço no nome do arquivo). Em seguida,
atualize o arquivo *livro.asc* para incluir o novo arquivo criado. 
Consulte o manual.

[[sec_registro_definicao]]
=== Definição de registro

(((Registro)))

Definição de Registro::
Um Registro é um *tipo de dado* criado pelo usuário, através da *composição* 
de outros tipos de dados.

Nós utilizamos registros quando desejamos criar um tipo de dado para guardar
informações sobre um o desejamos representar. No registro, as informações são
organizadas em *campos*.

Uma analogia de registro pode ser vista quando preenchemos um formulário. Na <<tab_formulario_cliente>>
nós temos um exemplo de formulário para cadastrar *Clientes*. Os *campos* do formulário
são preenchidos com os dados do cliente que nos interessa registrar.

[[tab_formulario_cliente]]
.Formulário para cadastro de Cliente
|====
2+| Nome:
| Data de Nascimento: | Telefone para contato:
| CPF: | RG:
|====

Sabendo as informações que desejamos registrar sobre um Cliente, nós podemos
esquematizar um registro, informando os tipos de dado de cada campo, conforme
descrito na <<tab_registro_cliente>>.

[[tab_registro_cliente]]
[width="80%",cols="1,2,1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.5+^.^s| Cliente
| Nome | Textual
| Data de Nascimento | Numérico
| Telefone para contato | Textual
| CPF | Numérico
| RG | Numérico
|====

Quando criamos um novo tipo de dado na linguagem, poderemos novas variáveis
com este tipo.


[TIP]
.Relembrando
====
Em nossos programas nós utilizamos *variávies* para manter as informações que
desejamos manipular. No momento da criação de uma variável precisamos especificar
o *tipo de dado* que desejamos que ela mantenha, através da *declaração da 
variável*. Vamos relembrar como declaramos variáveis:

.Em pseudo-código
----
DECLARE nome_da_variavel : TEXTUAL
DECLARE var1,var2,var3: NUMÉRICO
----

.Em C
[source, c]
----
char[] nome_da_variavel;
double var1,var2,var3;
----

Quando especificamos mais de uma variável separadas por vírgula, assumimos que
todas elas possuem o mesmo tipo.
====


Na próxima seção, veremos como é a sintaxe para criação de registros, em
pseudo-código e em C.


=== Sintaxe para criação de registros

Agora que temos o entendimento que um registro é um tipo de dado, vamos conhecer
a notação/sintaxe para especificar o novo tipo de dado:

.Notação em pseudo-código para criar registro
----
REGISTRO nome_do_registro
	// Declarações de variáveis/campos
REGISTRO_FIM
----

.Sintaxe em C para criar registro
----
struct nome_do_registro {
	// Declarações de variáveis/campos
};
----

Quando criamos um novo tipo de dado precisamos nomeá-lo, para 
podermos referenciá-lo mais tarde. Nestas notações `nome_do_registro` é
o nome do tipo de dado registro que será criado.

As declarações de variáveis definem os campos que *compõe* o registro. 
Esta *composição* ficará evidente nas próxima seçãos, onde iremos criar
e manipular vários registros.

Após a definição do novo tipo de dado registro, uma declaração de variável
com este tipo de dado é realizada da forma usual:

.Declaração de variável do tipo criado em pseudo-código
----
DECLARE variavel_nome: nome_do_registro 
----

.Declaração de variável do tipo criado em C
----
nome_do_registro variavel_nome;
----


[[sec_situacoes_registro]]
=== Análise para criação de Registros

Nesta seção mostramos o processo de criação de um Registro em diversas situações
diferentes. Em cada situação apresentada faremos uma análise sobre as informações
que desejamos registrar e os campos necessários.



[[situacao_aluno]]
==== Situação do cálculo das notas de um aluno
Em uma disciplina onde os alunos possuem duas notas, e precisamos registrar e 
calcular as médias de todos eles, como seria um registro para representar 
esta situação?

Nome do Registro:: Aluno
Campos:: Obviamente vamos precisar guardar *duas notas* para cada aluno. 'Vamos 
precisar guardar a média também?' Não, uma vez que temos as duas notas 
registradas, sempre que desejarmos consultar a média poderemos calculá-las.
'O nome do aluno seria uma informação útil?' Sem dúvidas! Será importante
registrar o *nome* do aluno pois poderíamos imprimir uma lista com os nomes, notas
e médias de cada aluno. 'A matrícula do aluno é importante também?' Nós poderíamos
suprimir a matrícula do aluno, mas qual seria a consequência disso? Por exemplo,
na lista de notas poderia conter apenas os nomes, notas e média. Mas o que 
aconteceria se tivéssemos dois alunos com o mesmo nome? Nós precisamos de um 
informação extra para 'identificar' e diferenciar um aluno do outro. 
Com este intuito, vamos optar por registrar a *matrícula* também. 'O nome
da disciplina é importante?' Neste caso não, pois estamos nos limitando aos alunos 
e suas notas.

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.4+^.^s| Aluno
| matrícula | Numérico
| nome  | Textual
| nota1 | Numérico
| nota2 | Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_aluno_pseudo.txt[]
----

[[ex_reg_aluno]]
[source, c]
.Registro em C: code/registros/reg_aluno.c
----
include::code/registros/reg_aluno.c[]
----



[[situacao_pessoa_imc]]
==== Situação do cálculo e consulta do IMC de uma pessoa
Nesta situação desejamos criar um sistema para *cadastrar* pessoas e em seguida
*consultar* o IMC delas.

Nome do Registro:: Pessoa
Campos:: Para o cálculo do IMC são necessárias duas informações: a *altura*
e o *peso*. Novamente, o *nome* da pessoa é uma informação relevante, pois
vamos imprimir o IMC calculado junto com o nome. 'Mas como realizar a consulta?
Após o cadastro realizado de algumas pessoas, qual o parâmetro de busca que 
iremos utilizar para encontrar a pessoa certa?' Poderíamos utilizar o nome 
completo da pessoa para encontrá-la. Mas digitar o nome todo é enfadonho. 
Poderíamos utilizar apenas o primeiro nome para busca, mas então teríamos
que apresentar um lista com todas as pessoas com aquele primeiro nome e selecionar
a pessoa correta entre elasfootnote:[A opção de utilizar o primeiro nome iria complicar o 
algorítmo da busca.]. Se cadastrarmos o *CPF* da pessoa poderíamos consultá-la 
mais tarde informando apenas ele, simplificando a busca. Por último, como 
algumas tabelas do IMC apresentam os dados categorizados por *sexo*, vamos 
registrá-lo também. 

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.5+^.^s| Pessoa
| nome | Textual
| peso  | Numérico
| altura | Numérico
| cpf | Numérico
| sexo | Textual
|====

.Registro em Pseudo-código
----
include::code/registros/reg_pessoa_pseudo.txt[]
----

[[ex_reg_pessoa]]
[source, c]
.Registro em C: code/registros/reg_pessoa.c
----
include::code/registros/reg_pessoa.c[]
----



[[situacao_ponto_matematica]]
==== Situação sobre manipulação de pontos no plano cartesiano
Nesta situação desejamos criar um sistema matemático para manipular pontos no 
plano cartesiano.

Nome do Registro:: Ponto
Campos:: Para registrar um ponto no plano cartesiano basta informar os 
valores de suas coordenadas (x,y).

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.2+^.^s| Ponto
| x  | Numérico
| y | Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_ponto_matematica_pseudo.txt[]
----

[[ex_reg_ponto]]
[source, c]
.Registro em C: code/registros/reg_ponto.c
----
include::code/registros/reg_ponto.c[]
----


[[situacao_produto_supermercado]]
==== Situação sobre cadastro de produtos no supermercado
Nesta situação desejamos criar um sistema para supermercado que cadastre 
produtos e seus preços.

Nome do Registro:: Produto
Campos:: Para registrar um produto vamos precisar do seu *nome* e o seu
*preço*. 'Mas como identificar um produto cadastrado?' Quando vamos no supermercado
e compramos alguma mercadoria no peso, o caixa do supermercado precisa fornecer 
um código para cadastrar o produto pesado na sua lista de compras. Geralmente
ele utiliza uma tabela, onde há o nome do produto e o seu código. Para a nossa
aplicação vamos utilizar este mesmo *código* para identificar unicamente cada produto.

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.3+^.^s| Produto
| nome  | Textual
| preço | Numérico
| código do produto | Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_produto_supermercado_pseudo.txt[]
----


[[ex_reg_produto]]
[source, c]
.Registro em C: code/registros/reg_protudo.c
----
include::code/registros/reg_produto.c[]
----

[[situacao_conta_bancaria]]
==== Situação sobre gerenciamento de contas bancárias
Nesta situação desejamos criar um sistema bancário para gerenciar clientes e 
suas contas bancárias.

Nomes dos Registros:: Cliente e Conta.
Campos:: O *nome* do cliente é uma informação relevante. O *CPF* poderá
ser utilizado para 'identificar/diferenciar' clientes com o 
mesmo nome. 'Como identificar a conta do cliente?' Cada conta poderia ter um
*número de conta único*, que serviria para identificar a conta do cliente.
Cada conta terá um *saldo*, que será gerenciada pelo sistema. Como cada cliente
pode possuir mais de uma conta bancária, junto com a conta deveremos registrar
qual cliente é o dono dela. Vamos utilizar o *CPF do cliente na conta* para 
identificar o seu dono.


[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.3+^.^s| Conta
| número da conta  | Numérico
| saldo | Numérico
| cpf do dono da conta | Numérico
|====


.Registro em Pseudo-código
----
include::code/registros/reg_conta_pseudo.txt[]
----

[[ex_reg_conta]]
[source, c]
.Registro em C: code/registros/reg_conta.c
----
include::code/registros/reg_conta.c[]
----

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.2+^.^s| Cliente
| nome  | Textual
| cpf | Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_cliente_pseudo.txt[]
----

[[ex_reg_cliente]]
[source, c]
.Registro em C: code/registros/reg_cliente.c
----
include::code/registros/reg_cliente.c[]
----

=== Exemplos de utilização dos Registros
Nesta seção veremos alguns exemplos que demonstram a utilização de registros.

==== Aluno
Exemplo de utilização do registro Aluno.

[source, c]
.code/registros/reg_aluno_exemplo.c
----
include::code/registros/reg_aluno_exemplo.c[]
----

.Simulação da execução
----
include::code/registros/reg_aluno_exemplo_simulacao.txt[]
----

==== Pontos
Exemplo de utilização do registro Ponto.

[source, c]
.code/registros/reg_ponto_exemplo.c
----
include::code/registros/reg_ponto_exemplo.c[]
----

.Simulação da execução
----
include::code/registros/reg_ponto_exemplo_simulacao.txt[]
----


////
include::code/registros/reg_aluno_exemplo.txt[]
include::code/registros/reg_aluno_exemplo.c[]
include::code/registros/reg_pessoa_exemplo.txt[]
include::code/registros/reg_pessoa_exemplo.c[]
include::code/registros/reg_ponto_matematica_exemplo.txt[]
include::code/registros/reg_ponto_matematica_exemplo.c[]
include::code/registros/reg_produto_supermercado_exemplo.txt[]
include::code/registros/reg_produto_supermercado_exemplo.c[]
include::code/registros/reg_cliente_exemplo.txt[]
include::code/registros/reg_cliente_exemplo.c[]
include::code/registros/reg_conta_exemplo.txt[]
include::code/registros/reg_conta_exemplo.c[]
////

=== Exercícios resolvidos

Nesta seção teremos a especificação de diversos problemas. Para cada um deles
iremos escrever um pseudo-código que resolva o problema descrito, utilizando
o recurso de Registros.

==== Problema do cálculo de médias de alunos

Escrever um programa que cadastre o nome, a matrícula e duas notas de vários alunos.
Em seguida imprima a matrícula, o nome e a média de cada um deles.

.Pseudo-código do programa
----
include::code/registros/reg_aluno_pseudo.txt[]
include::code/registros/calculo_das_medias_pseudo.txt[]
----

.Programa em C: code/registros/calculo_das_medias.c
[source,c]
----
include::code/registros/calculo_das_medias.c[]
----

.Simulação da execução
----
include::code/registros/calculo_das_medias_simulacao.txt[]
----

==== Problema do cálculo e consulta do IMC de uma pessoa

Escrever um programa que cadastre o nome, a altura, o peso, o cpf e sexo
de algumas pessoas. Com os dados cadastrados, em seguida localizar uma pessoas
através do seu CPF e imprimir o seu IMC.

.Pseudo-código do programa
----
include::code/registros/reg_pessoa_pseudo.txt[]
include::code/registros/imc_calculo_pseudo.txt[]
----

.Programa em C: code/registros/imc_calculo.c
[source,c]
----
include::code/registros/imc_calculo.c[]
----

.Simulação da execução
----
include::code/registros/imc_calculo_simulacao.txt[]
----




==== Problema de pontos no plano cartesiano

Escrever um programa que leia 5 pontos. Em seguida imprima qual o ponto mais
próximo do primeiro ponto lido.

.Pseudo-código do programa
----
include::code/registros/reg_ponto_matematica_pseudo.txt[]
include::code/registros/ponto_proximo_pseudo.txt[]
----

<1> `MAIOR_INTEIRO` representa o maior número inteiro que podemos armazenar numa
variável. Geralmente atribuimos *o maior* inteiro quando procurando por
*um menor* valor. No código, comparamos `menor_distancia_ao_quadrado` com
`distancia_ao_quadrado` e salvamos o *menor* deles. Se executarmos isso 
sucessivamente, ao final, `menor_distancia_ao_quadrado` conterá o *menor* valor
comparado. Caso tivéssemos inicializado a variável `menor_distancia_ao_quadrado`
com `0`, ao compará-lo com outro número, ele seria o *menor*, impossibilitando 
encontrar a *menor* distância.
<2> Esta variável irá guardar a posição do ponto mais próximo. Ela é atualizada,
sempre que encontramos outro ponto com menor distância.
<3> Calculo para encontrar a distância entre dois pontos. Na realizadade, a 
distância entre os dois pontos seria a raiz de `distancia_ao_quadrado`. Mas
não há diferença em comparar a distância ao quadrado, ex: sabemos que a raiz
de `15` é menor do que a raiz de `16` sem precisar calcular as raizes deles.


.Programa em C: code/registros/ponto_proximo.c
[source,c]
----
include::code/registros/ponto_proximo.c[]
----

.Simulação da execução
----
include::code/registros/ponto_proximo_simulacao.txt[]
----


==== Problema sobre cadastro de produtos no supermercado

Escrever um programa que cadastre vários produtos. Em seguida, imprima uma lista
com o código e nome da cada produto. Por último, consulte o preço de um produto
através de seu código.

.Pseudo-código do programa
----
include::code/registros/reg_produto_supermercado_pseudo.txt[]
include::code/registros/prob_supermercado_pseudo.txt[]
----

.Programa em C: code/registros/supermercado.c
[source,c]
----
include::code/registros/supermercado.c[]
----

.Simulação da execução
----
include::code/registros/supermercado_simulacao.txt[]
----



==== Problema sobre gerenciamento de contas bancárias

Escreva um programa que simule contas bancárias, com as seguintes especificações:

* Ao iniciar o programa vamos criar contas bancárias para três clientes.
** Cada conta terá o nome e o CPF do cliente associado a ela.
** No ato da criação da conta o cliente precisará fazer um depósito inicial.
* Após as contas serem criadas, o sistema deverá possibilitar realizações de 
saques ou depósitos nas contas.
** Sempre que uma operação de saque ou depósito seja realizada, o sistema deverá
imprimir o nome do titular e o saldo final da conta.


.Pseudo-código do programa
----
include::code/registros/reg_conta_pseudo.txt[]
include::code/registros/reg_cliente_pseudo.txt[]
include::code/registros/prob_conta_bancaria_pseudo.txt[]
----

.Programa em C: code/registros/conta_bancaria.c
[source,c]
----
include::code/registros/conta_bancaria.c[]
----

.Simulação da execução
----
include::code/registros/conta_bancaria_simulacao.txt[]
----


=== Identificadores de registros

Identificadores de registros são informações no registros que o identifica e 
diferencia um registro de qualquer outro.

.Exemplos de Identificadores no registros

Clinte:: Em <<ex_reg_cliente>> o cliente possui um `codigo`. Em sistemas é comum os 
registros possuírem um código para identificar e diferenciar uma *instância* de 
registro da outra.

Produto:: Em <<ex_reg_produto>> o `codigo` poderia representar seu código de barra.
De tal forma que se duas instâncias do registro Produto possuem o mesmo código
de barra, então eles são o mesmo produto.

Conta:: Em <<ex_reg_conta>> nós temos uma conta bancária cujo o dono é especificado
pelo `codigo_do_cliente`. Para descobrir o dono da conta bastaria pesquisar 
todos clientes cadastrados comparando `codigo` com `codigo_do_cliente`.

Aluno:: Em <<ex_reg_aluno>> a `matricula` desempenha o papel de um código. Pois cada 
aluno é identificado por uma matrícula diferente.

Pessoa:: De forma similar, em <<ex_reg_pessoa>> o `cpf` desempenha o papel de um código. 
Pois cada pessoa possui um único CPF, e que é diferente de todas as outras.


[TIP]
====
O identificadores costumam ser do tipo numérico e inteiro, pois a comparação
de inteiros é mais rápida do que comparação textual.
====




=== Criando registros em C


Antes de aprofundarmos o conceito de Registro, vamos conhecer alguns exemplos 
de registros em C.

Em <<ex_reg_aluno>> nós temos um registro que agrupa informações (`nome`, 
`matricula`, `nota1` e `nota2`) relativas a um aluno.


No exemplo a seguir, temos um registro sobre uma pessoa:



Na matemática, poderíamos ter um registro agrupando duas coordenadas `(x,y)` 
para representar um ponto:



Em um programa de supermercado um produto poderia ser caracterizado através de
um registro da seguinte forma:



Em um sistema bancário, poderíamos representar um cliente e uma conta bancária, 
respectivamente, da seguinte forma:



Até agora vimos como representamos registros em C, para representar registros
em pseudo-código vamos utilizar a sintaxe demonstra pelo seguinte exemplo:

----
include::code/registros/reg_aluno_pseudo.txt[]
----


=== Comparação entre Arranjo e Registro

A tabela a seguir mostra uma comparação em Arranjo e Registro.

[cols="1a,1a",frame="topbot",options="header"]
|====
| Arranjo (ou array) | Registro
| 
* Estrutura de dados homogênia
** Arranjo de variáveis referenciadas por um mesmo nome e indexada por um inteiro. Ex: `notas[i]`.
* Armazena vários valores, mas *todos do mesmo tipo*.
|
* Estrutura de dados heterogênia
** Coleção de variáveis referencias por um mesmo nome
* Armazena vários valores, e *podem ser de diferentes tipos*
* Cada valor é armazenado num campo com um tipo próprio
|====


// Sempre termine os arquivos com uma linha em branco.

