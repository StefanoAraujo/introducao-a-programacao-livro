== Registros

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Criar registros em C
* Manipular registros
____________________

Neste lugar você deve apresentar o conteúdo em forma de diálogo.

NOTE: Para começar a escrever um novo capítulo, copie este arquivo e 
salve com outro nome (não utilize espaço no nome do arquivo). Em seguida,
atualize o arquivo *livro.asc* para incluir o novo arquivo criado. 
Consulte o manual.

[[sec_registro_definicao]]
=== Definição de registro

.Definição de Registro
****
Um Registro é um *tipo de dado* criado pelo usuário, através da *composição* 
de outros tipos de dados.
****

Nós utilizamos um registro quando desejamos criar um tipo de dado para guardar
as informações sobre uma entidade que desejamos representar. Cada informação
que desejamos gravar será organizada em 'campos', dentro do registro.

Você pode comparar os registros e campos com um formulário que preenchemos no
nosso dia a dia, em <<formulario_cliente>> nós temos um possível exemplo.

[[formulario_cliente]]
.Formulário para cadastro de cliente
|====
2+| Nome:
| Data Nascimento: | Telefone para contato:
| CPF: .|  RG:
|====

Neste formulário nós percebemos 5 *campos*: Nome, Data Nascimento, Telefone para contato,
CPF e RG, sobre o cliente.


// Adicionar entidade ao glossário?

Em <<sec_situacoes_registro>> vimos diversas situações, e construímos uma lista
com informações que desejamos salvar em cada um dos contextos que determinamos. 

Em todas estas situações apenas 2 tipos de dados foram utilizados
para especificar o tipo da informação esparada: *numérico* e *textual*.

Chegou o momento de aprimorar nossa definição de registro.


[TIP]
.Relembrando
====
Em nossos programas nós utilizamos *variávies* para manter as informações que
desejamos manipular. No momento da criação de uma variável precisamos especificar
o *tipo de dado* que desejamos que ela mantenha, através da *declaração da 
variável*. Vamos relembrar como declaramos variáveis:

.Em pseudo-código
----
DECLARE nome_da_variavel : TEXTUAL
DECLARE var1,var2,var3: NUMÉRICO
----

.Em C
[source, c]
----
char[] nome_da_variavel;
double var1,var2,var3;
----

Quando especificamos mais de uma variável separadas por vírgula, assumimos que
todas elas possuem o mesmo tipo.
====

.Comparação entre Arranjo e Registro
[cols="1a,1a",frame="topbot",options="header"]
|====
| Arranjo (ou array) | Registro
| 
* Estrutura de dados homogênia
** Arranjo de variáveis referenciadas por um mesmo nome e indexada por um inteiro. Ex: `notas[i]`.
* Armazena vários valores, mas *todos do mesmo tipo*.
|
* Estrutura de dados heterogênia
** Coleção de variáveis referencias por um mesmo nome
* Armazena vários valores, e *podem ser de diferentes tipos*
* Cada valor é armazenado num campo com um tipo próprio
|====


[[sec_situacoes_registro]]
=== Situações para criarmos Registros

(((Registro)))

Veremos mais adiante uma definição mais formal de registro, por enquanto iremos 
começar nossos estudos com uma definição inicial sobre Registro.

.Definição inicial de Registro
****
Um Registro pode ser entendido como um elemento *agrupador de informações* 
que desejamos registrar sobre um determinado *contexto*.
****

Vamos construir juntos um entendimento sobre registros. Para isso vamos estudar,
nesta seção, diversas situações, tentando identificar as informações que 
desejamos agrupar e o contexto delas.

[[situacao_aluno]]
==== Situação do cálculo das notas de um aluno
Em uma disciplina onde os alunos só possuem duas notas, e precisamos calcular
as médias de todos eles, quais seriam o contexto e as informações para um 
registro que desejamos construir?

Contexto:: Notas de um aluno numa disciplina.
Informações:: Obviamente vamos precisar de guardar *duas notas*. 'Vamos 
precisar guardar a média também?' Não, uma vez que temos as duas notas 
registradas, sempre que desejarmos consultar a média poderemos calcula-las.
'O nome do aluno seria uma informação útil?' Sem dúvidas! Será importante
registrar o *nome* do aluno pois poderíamos imprimir uma lista com os nomes, notas
e médias de cada aluno. 'A matrícula do aluno é importante também?' Nós poderíamos
suprimir a matrícula do aluno, mas qual seria a consequência disso? Por exemplo,
na lista de notas poderia conter apenas os nomes, notas e média. Mas o que 
aconteceria se tivéssemos dois alunos com o mesmo nome? Nós precisamos de um 
informação extra para 'identificar' e diferenciar um aluno do outro. 
Com este intuíto, vamos optar por registrar a *matrícula* também. 'O nome
da disciplina é importante?' Neste caso não, pois estamos nos limitando aos alunos 
e suas notas. Na lista a seguir vamos resumir as informações que desejamos 
registrar e o *tipo* esperado para cada uma delas:
+
* *matrícula* (informação numérica)
* *nome* (informação textual)
* *nota1* (informação numérica)
* *nota2* (informação numérica)

[[situacao_pessoa_imc]]
==== Situação do cálculo e consulta do IMC de uma pessoa
Nesta situação desejamos criar um sistema para *cadastrar* pessoas e em seguida
*consultar* o IMC delas. Qual o contexto e as informações que desejamos salvar?

Contexto:: Informações sobre uma pessoa para cálculo do IMC.
Informações:: Para o cálculo do IMC são necessárias duas informações: a *altura*
e o *peso*. Novamente, o *nome* da pessoa é uma informação relevante, pois
vamos imprimir o IMC calculado junto com o nome. 'Mas como realizar a consulta?
Após o cadastro realizado de algumas pessoas, qual o parâmetro de busca que 
iremos utilizar para encontrar a pessoa certa?' Poderíamos utilizar o nome 
completo da pessoa para encontra-la. Mas digitar o nome todo é enfadonho. 
Poderíamos utilizar apenas o primeiro nome para busca, mas então teríamos
que apresentar um lista com todas as pessoas com aquele primeiro nome e selecionar
a pessoa correta entre elasfootnote:[A opção de utilizar o primeiro nome iria complicar o 
algorítmo da busca.]. Se cadastrarmos o *CPF* da pessoa poderíamos consulta-la 
mais tarde informando apenas ele, simplificando a busca. Por último, como 
algumas tabelas do IMC apresentam os dados categorizados por *sexo*, vamos 
registra-lo também. Segue o resumo das informações que vamos registrar.
+
* *nome* (informação textual)
* *peso* (informação numérica)
* *altura* (informação numérica)
* *cpf* (informação numérica)
* *sexo* (informação textual)

[[situacao_ponto_matematica]]
==== Situação sobre manipulação de pontos no plano cartesiano
Nesta situação desejamos criar um sistema matemático para manipular pontos num 
plano cartesiano.

Contexto:: Ponto no plano cartesiano.
Informações:: Para registrar um ponto no plano cartesiano basta informar os 
valores de suas coordenadas (x,y). Resumo das informações:
+
* *x* (informação numérica)
* *y* (informação numérica)


[[situacao_produto_supermercado]]
==== Situação sobre cadastro de produtos no supermercado
Nesta situação desejamos criar um sistema para supermercado que cadastre 
produtos e seus preços.

Contexto:: Produto de Supermercado.
Informações:: Para registrar um produto vamos precisar do seu *nome* e o seu
*preço*. 'Mas como identificar um produto cadastrado?' Quando vamos no supermercado
e compramos alguma mercadoria no peso, o caixa do supermercado precisa fornecer 
um código para cadastrar o produto pesado na sua lista de compras. Geralmente
ele utiliza uma tabela, onde há o nome do produto e o seu código. Para a nossa
aplicação vamos utilizar este mesmo *código* para identificar unicamente cada produto. 
Resumo:
+
* *nome* (informação textual)
* *preço* (informação numérica)
* *código do produto* (informação numérica)

[[situacao_conta_bancaria]]
==== Situação sobre gerenciamento de contas bancárias
Nesta situação desejamos criar um sistema bancário para gerenciar clientes e 
suas contas bancárias.

Contexto:: Sistema bancário, gerenciar contas de clientes.
Informações:: O *nome* do cliente é uma informação relevante. O *CPF* poderá
ser utilizado para 'identificar/diferenciar' clientes com o 
mesmo nome. 'Como identificar a conta do cliente?' Cada conta poderia ter um
*número de conta único*, que serviria para identificar a conta do cliente.
Cada conta terá um *saldo*, que será gerenciada pelo sistema. Como cada cliente
pode possuir mais de uma conta bancária, junto com a conta deveremos registrar
qual cliente é o dono dela. Vamos utilizar o CPF do cliente para identificar o
seu dono. Resumo:
Para o cliente:::
* *nome* (informação textual)
* *cpf* (informação numérica)
Para a conta:::
* *número da conta* (informação textual)
* *saldo* (informação numérica)
* *cpf do dono da conta* (informação numérica)



=== Notação em Pseudo-código para criar o tipo de dado registro

Agora que temos o entendimento que um registro é um tipo de dado, vamos definir
uma notação para especificar o novo tipo de dado em pseudo-código:

 REGISTRO nome_do_registro
   // Declarações de variáveis aqui dentro
 REGISTRO_FIM

Quando criamos um novo tipo de dados precisamos primeiro nomea-lo, para 
podermos referencia-lo. Nesta notação o `nome_do_registro` desempenha o nome do 
tipo de dado registro.

As declarações de tipos que se seguem são os tipos de dados que *compõe* o 
registro. Esta *composição* ficará esclarecida na próxima seção, onde iremos
criar tipos de dados registro para as situações apresentadas anteriormente.

Mais aditante quando desejarmos declarar uma variável com este novo tipo 
poderemos fazê-lo da mesma forma que estamos habituados a fazer:

 DECLARE variavel_nome: nome_do_registro 

=== Registros em Pseudo-código

Na situação em <<situacao_aluno>> nós poderíamos criar um novo tipo de dado
que *representasse um Aluno* da seguinte forma:

----
include::code/registros/reg_aluno_pseudo.txt[]
----


Na situação em <<situacao_pessoa_imc>> nós poderíamos criar um novo tipo de dado
que *representasse uma Pessoa* da seguinte forma:

----
include::code/registros/reg_pessoa_pseudo.txt[]
----


Na situação em <<situacao_ponto_matematica>> nós poderíamos criar um novo tipo 
de dado que *representasse um Ponto* da seguinte forma:

----
include::code/registros/reg_ponto_matematica_pseudo.txt[]
----

Na situação em <<situacao_produto_supermercado>> nós poderíamos criar um novo 
tipo de dado que *representasse um Produto* de supermercado da seguinte forma:

----
include::code/registros/reg_produto_supermercado_pseudo.txt[]
----

E por último, na situação em <<situacao_conta_bancaria>> nós desejamos 
representar dois tipos de dados diferentes: *Cliente* e *Conta bancária*.

----
include::code/registros/reg_cliente_pseudo.txt[]
----

----
include::code/registros/reg_conta_pseudo.txt[]
----


==== Utilizando os Registros em Pseudo-código
Nesta seção veremos exemplos simples de utilização de registros em Pseudo-código.

////
include::code/registros/reg_aluno_pseudo.txt[]
include::code/registros/reg_aluno_exemplo.txt[]
include::code/registros/reg_pessoa_exemplo.txt[]
include::code/registros/reg_pessoa_pseudo.txt[]
include::code/registros/reg_ponto_matematica_pseudo.txt[]
include::code/registros/reg_ponto_matematica_exemplo.txt[]
include::code/registros/reg_produto_supermercado_pseudo.txt[]
include::code/registros/reg_produto_supermercado_exemplo.txt[]
include::code/registros/reg_cliente_pseudo.txt[]
include::code/registros/reg_cliente_exemplo.txt[]
include::code/registros/reg_conta_pseudo.txt[]
include::code/registros/reg_conta_exemplo.txt[]
////

=== Resolvendo os problemas com Registros e Pseudo-código

Nesta seção teremos a especificação de diversos problemas. Para cada um deles
iremos escrever um pseudo-código que resolva o problema descrito, utilizando
o recurso de Registros.

==== Problema do cálculo de médias de alunos

Escrever um programa que cadastre o nome, a matrícula e duas notas de vários alunos.
Em seguida imprima a matrícula, o nome e a média de cada um deles.

.Pseudo-código do programa
----
include::code/registros/reg_aluno_pseudo.txt[]
include::code/registros/calculo_das_medias_pseudo.txt[]
----

.Programa em C: code/registros/calculo_das_medias.c
[source,c]
----
include::code/registros/calculo_das_medias.c[]
----

.Simulação da execução
----
include::code/registros/calculo_das_medias_simulacao.txt[]
----

==== Problema do cálculo e consulta do IMC de uma pessoa

Escrever um programa que cadastre o nome, a altura, o peso, o cpf e sexo
de algumas pessoas. Com os dados cadastrados, em seguida localizar uma pessoas
através do seu CPF e imprimir o seu IMC.

.Pseudo-código do programa
----
include::code/registros/reg_pessoa_pseudo.txt[]
include::code/registros/imc_calculo_pseudo.txt[]
----

.Programa em C: code/registros/imc_calculo.c
[source,c]
----
include::code/registros/imc_calculo.c[]
----

.Simulação da execução
----
include::code/registros/imc_calculo_simulacao.txt[]
----




==== Problema de pontos no plano cartesiano

Escrever um programa que leia 5 pontos. Em seguida imprima qual o ponto mais
próximo do primeiro ponto lido.

.Pseudo-código do programa
----
include::code/registros/reg_ponto_matematica_pseudo.txt[]
include::code/registros/ponto_proximo_pseudo.txt[]
----

<1> `MAIOR_INTEIRO` representa o maior número inteiro que podemos armazenar numa
variável. Geralmente atribuimos *o maior* inteiro quando procurando por
*um menor* valor. No código, comparamos `menor_distancia_ao_quadrado` com
`distancia_ao_quadrado` e salvamos o *menor* deles. Se executarmos isso 
sucessivamente, ao final, `menor_distancia_ao_quadrado` conterá o *menor* valor
comparado. Caso tivéssemos inicializado a variável `menor_distancia_ao_quadrado`
com `0`, ao compará-lo com outro número, ele seria o *menor*, impossibilitando 
encontrar a *menor* distância.
<2> Esta variável irá guardar a posição do ponto mais próximo. Ela é atualizada,
sempre que encontramos outro ponto com menor distância.
<3> Calculo para encontrar a distância entre dois pontos. Na realizadade, a 
distância entre os dois pontos seria a raiz de `distancia_ao_quadrado`. Mas
não há diferença em comparar a distância ao quadrado, ex: sabemos que a raiz
de `15` é menor do que a raiz de `16` sem precisar calcular as raizes deles.


.Programa em C: code/registros/ponto_proximo.c
[source,c]
----
include::code/registros/ponto_proximo.c[]
----

.Simulação da execução
----
include::code/registros/ponto_proximo_simulacao.txt[]
----


==== Problema sobre cadastro de produtos no supermercado

Escrever um programa que cadastre vários produtos. Em seguida, imprima uma lista
com o código e nome da cada produto. Por último, consulte o preço de um produto
através de seu código.

.Pseudo-código do programa
----
include::code/registros/reg_produto_supermercado_pseudo.txt[]
include::code/registros/prob_supermercado_pseudo.txt[]
----

.Programa em C: code/registros/supermercado.c
[source,c]
----
include::code/registros/supermercado.c[]
----

.Simulação da execução
----
include::code/registros/supermercado_simulacao.txt[]
----



==== Problema sobre gerenciamento de contas bancárias

Escreva um programa que simule contas bancárias, com as seguintes especificações:

* Ao iniciar o programa vamos criar contas bancárias para três clientes.
** Cada conta terá o nome e o CPF do cliente associado a ela.
** No ato da criação da conta o cliente precisará fazer um depósito inicial.
* Após as contas serem criadas, o sistema deverá possibilitar realizações de 
saques ou depósitos nas contas.
** Sempre que uma operação de saque ou depósito seja realizada, o sistema deverá
imprimir o nome do titular e o saldo final da conta.


.Pseudo-código do programa
----
include::code/registros/reg_conta_pseudo.txt[]
include::code/registros/reg_cliente_pseudo.txt[]
include::code/registros/prob_conta_bancaria_pseudo.txt[]
----

.Programa em C: code/registros/conta_bancaria.c
[source,c]
----
include::code/registros/conta_bancaria.c[]
----

.Simulação da execução
----
include::code/registros/conta_bancaria_simulacao.txt[]
----


=== Identificadores de registros

Identificadores de registros são informações no registros que o identifica e 
diferencia um registro de qualquer outro.

.Exemplos de Identificadores no registros

Clinte:: Em <<ex_reg_cliente>> o cliente possui um `codigo`. Em sistemas é comum os 
registros possuírem um código para identificar e diferenciar uma *instância* de 
registro da outra.

Produto:: Em <<ex_reg_produto>> o `codigo` poderia representar seu código de barra.
De tal forma que se duas instâncias do registro Produto possuem o mesmo código
de barra, então eles são o mesmo produto.

Conta:: Em <<ex_reg_conta>> nós temos uma conta bancária cujo o dono é especificado
pelo `codigo_do_cliente`. Para descobrir o dono da conta bastaria pesquisar 
todos clientes cadastrados comparando `codigo` com `codigo_do_cliente`.

Aluno:: Em <<ex_reg_aluno>> a `matricula` desempenha o papel de um código. Pois cada 
aluno é identificado por uma matrícula diferente.

Pessoa:: De forma similar, em <<ex_reg_pessoa>> o `cpf` desempenha o papel de um código. 
Pois cada pessoa possui um único CPF, e que é diferente de todas as outras.


[TIP]
====
O identificadores costumam ser do tipo numérico e inteiro, pois a comparação
de inteiros é mais rápida do que comparação textual.
====




=== Criando registros em C


Antes de aprofundarmos o conceito de Registro, vamos conhecer alguns exemplos 
de registros em C.

Em <<ex_reg_aluno>> nós temos um registro que agrupa informações (`nome`, 
`matricula`, `nota1` e `nota2`) relativas a um aluno.

[[ex_reg_aluno]]
[source, c]
.code/registros/reg_aluno.c
----
include::code/registros/reg_aluno.c[]
----

IMPORTANT: Compreenda que as variáveis agrupadas em um registro *devem
possuírem uma relação entre elas*. Neste caso, elas juntas caracterizam um 
aluno.

No exemplo a seguir, temos um registro sobre uma pessoa:

[[ex_reg_pessoa]]
[source, c]
.code/registros/reg_pessoa.c
----
include::code/registros/reg_pessoa.c[]
----

Na matemática, poderíamos ter um registro agrupando duas coordenadas `(x,y)` 
para representar um ponto:

[[ex_reg_ponto]]
[source, c]
.code/registros/reg_ponto.c
----
include::code/registros/reg_ponto.c[]
----

Em um programa de supermercado um produto poderia ser caracterizado através de
um registro da seguinte forma:

[[ex_reg_produto]]
[source, c]
.code/registros/reg_protudo.c
----
include::code/registros/reg_produto.c[]
----

Em um sistema bancário, poderíamos representar um cliente e uma conta bancária, 
respectivamente, da seguinte forma:

[[ex_reg_cliente]]
[source, c]
.code/registros/reg_cliente.c
----
include::code/registros/reg_cliente.c[]
----


[[ex_reg_conta]]
[source, c]
.code/registros/reg_conta.c
----
include::code/registros/reg_conta.c[]
----

Até agora vimos como representamos registros em C, para representar registros
em pseudo-código vamos utilizar a sintaxe demonstra pelo seguinte exemplo:

----
include::code/registros/reg_aluno_pseudo.txt[]
----



// Sempre termine os arquivos com uma linha em branco.

