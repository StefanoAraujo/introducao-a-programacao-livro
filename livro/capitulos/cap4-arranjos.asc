== Arranjos

:cap: cap4

.Objetivos do capítulo
____
Ao final deste capítulo você deverá ser capaz de:

* Apresentar os conceitos de vetores e matrizes
* Apresentar o conceito de strings e como manipulá-las
____


=== Introdução

Até agora vimos que uma variável armazena um único valor por vez. Por 
exemplo, em um programa para ler as notas de vários alunos, cada nota é 
armazenada em uma variável, e assim que as notas de um novo aluno são lidas, 
as notas do aluno anterior são perdidas. Em alguns problemas, é necessário 
armazenar todos ou um conjunto de valores lidos sem que haja perda de 
informação. Nesse caso, seria inviável declarar uma variável distinta para 
armazenar cada valor, quando a quantidade de valores a serem manipulados for 
relativamente grande. Para situações como essas utilizamos Arranjos (em 
inglês _Arrays_), que consistem em estruturas de dados capazes de agrupar em 
uma única variável vários elementos de um mesmo tipo. O conceito de 
Arranjos, bem como as diferentes formas de utilizá-los serão discutidos em 
detalhes no decorrer deste capítulo, que ainda apresentará as cadeias de 
caracteres, conhecidas como _strings_. 

=== Vetores

Os arranjos podem ter diferentes dimensões. Um tipo especial de arranjo com 
apenas uma dimensão é chamado de *((vetor))*. Portanto, vetores são arranjos 
unidimensionais que representam um conjunto de variáveis com o mesmo tipo, as 
quais são acessadas através de um índice que as identificam.  A <<fig_vetor>> 
ilustra o conceito de vetor, apresentando um vetor de inteiros com cinco 
elementos, cada um com seu índice correspondente. O índice do primeiro 
elemento é sempre zero.

[[fig_vetor]]
.Vetor com cinco elementos.
image::images/cap4/vetor5.eps[scaledwidth="50%"]


NOTE: O conceito de arranjo nas diferentes linguagens de programação é o 
mesmo. Entretanto, em algumas linguagens alguns detalhes podem ser diferentes. 
Na linguagem C,  por exemplo, o índice inicial é sempre zero. Já na 
linguagem Pascal, o índice inicial é definido pelo próprio programador. 

==== Declaração de Vetores

Na linguagem C, devemos declarar um vetor da seguinte forma: 

	tipo_vetor nome_vetor[quantidade_elementos];

O `tipo_vetor` é o tipo de cada elemento do vetor. O `nome_vetor` é o nome da 
variável que irá identificar o vetor. A `quantidade_elementos` representa a 
quantidade máxima de elementos que o vetor poderá armazenar. Observe que essa 
quantidade deve ficar entre colchetes. Os índices do vetor irão de zero até 
`quantidade_elementos - 1`. O compilador irá reservar o espaço de memória 
correspondente ao que o programador definiu em `quantidade_elementos`.

Vamos ver alguns exemplos de declarações de vetores:

	int idades[50]; 
	char nomes[200];
	float precos[30];

No exemplo acima temos três declarações de vetores diferentes. Na primeira 
linha temos a declaração de um vetor chamado `idades` que terá no máximo 50 
elementos do tipo `int`, com índices de 0 a 49. Na segunda linha temos um 
vetor chamado `nomes` com 200 elementos do tipo `char`, com índices de 0 a 
199. Por fim, temos na última linha um vetor com identificador `precos`, com 
espaço para armazenar 30 elementos do tipo `float`, cujos índices variam de 0 
a 29.

==== Acessando os elementos de um vetor

Uma vez que um vetor foi declarado, poderemos armazenar e ler os valores dos 
elementos desse vetor. Para isso, devemos identificar o elemento do vetor que 
queremos acessar através do nome do vetor seguido do índice do elemento entre 
colchetes. Observe o exemplo abaixo:

[source,c,numbered]
----
...
int main() {
	int v[5], i;
	for (i = 0 ; i < 5 ; i++)
		scanf("%d", &v[i]);
...
----

// FIXME linhas

Na linha 3, um vetor `v` de 5 elementos do tipo `int` é declarado. Em seguida, 
temos um comando `for` que irá se repetir 5 vezes, com a variável `i` 
variando de 0 a 4. No corpo da estrutura de repetição, na linha 5, ocorre a 
leitura de valores inteiros, na qual cada valor lido é armazenado em um 
elemento do vetor `v` com índice igual ao valor da variável `i` em cada 
iteração. Para um melhor entendimento, considere a situação hipotética a 
seguir. Suponha que o usuário digitou os seguintes valores na leitura de 
dados: 4, 3, 7, 2 e 9. Nesse caso, o vetor ficaria da seguinte forma após a 
leitura dos valores:

.Configuração do vetor v após a leitura dos valores.
image::images/cap4/vetor_apos_leitura.eps[scaledwidth="30%"]

Uma vez que os elementos de um vetor foram inicializados, isto é, receberam 
algum valor através de uma operação de escrita na memória, podemos acessar 
tais valores para diversos fins. Por exemplo, podemos implementar um laço para 
percorrer todo o vetor e imprimir na tela os valores da cada um de seus 
elementos. O trecho de código a seguir ilustra como os elementos de um vetor 
são acessados e mostra como um laço para percorrer um vetor pode ser 
implementado:

[source,c,numbered]
----
...
printf("%d", v[0]); //mostra o valor 4 na saída
printf("%d", v[2]);  // mostra o valor 7 na saída
for (i = 0 ; i < 5 ; i++) 
	printf("%d ", v[i]); //mostra todos os valores 
printf("%d", v[5]);
...
----

Na linha 2 estamos pedindo para ser mostrado o valor do elemento de índice 0 
do vetor `v`. Sendo assim, o valor 4 é mostrado na tela. Na linha 3, é 
mostrado o valor do elemento de índice 2 do vetor `v`, cujo valor é 7. Já na 
linha 4 temos um laço de repetição que irá mostrar todos os valores dos 
elementos do vetor `v`.  Em seguida, na linha 6,  estamos tentando acessar o 
elemento de índice 5, que não existe. O programa irá compilar normalmente, 
entretanto, ocorrerá um erro em tempo de execução assim que o programa 
tentar acessar o elemento inexistente do vetor.

CAUTION: Tenha cuidado ao acessar elementos de um vetor cujo índice não 
existe. Caso isso aconteça, o programa irá compilar, entretanto, ocorrerá um 
erro em tempo de execução. 

Vamos fazer um outro exemplo para fixar melhor  o assunto. Digamos que queremos 
um programa para ler 20 valores do tipo inteiro e que após isso, sejam 
mostrados esses mesmos valores na ordem inversa da qual foram lidos. O exemplo 
abaixo mostra a solução do problema.

[source,c,numbered]
----
int main() {
	int i, valores[20];
	for (i = 0 ; i < 20 ; i++ ) //primeira etapa 
		scanf("%d", &valores[i]); 
	for (i = 19 ; i >= 0 ; i--) //segunda etapa 
	printf("%d ", valores[i]);
	return 0;
}
----

Podemos dividir o problema em duas etapas. A primeira é para ``montar'' um vetor 
com 20 valores digitados pelo usuário. A segunda parte é para mostrar os 
valores desse vetor na ordem inversa da qual foram lidos. Inicialmente, 
declaramos o vetor ``valores` com 20 elementos do tipo `int`. Para resolver 
cada etapa do problema, utilizamos um laço de repetição com o comando `for`. 
 Na linha 3, o laço `for` é utilizado para ler os valores, cada um sendo 
armazenado em um elemento do vetor. Na linha 5, temos um outro laço `for`, 
cuja variável de controle i é inicializada com o valor 19, que representa o 
índice do último elemento do vetor. A condição de parada do laço é que a 
variável `i` seja maior ou igual a zero e a última expressão do `for` é o 
decremento da variável `i`. Isso significa que o valor da variável `i` irá 
de 19 a 0 dentro do laço de repetição. Consequentemente, os valores dos 
elementos do vetor `valores` irão ser mostrados na ordem inversa da que foram 
lidos.

==== Exercício resolvido

ER 4.1:: Escreva um programa que leia 20 notas de alunos de uma turma. O 
programa deve calcular a média da turma e apresentar na tela apenas as notas 
dos alunos que ficaram acima da média calculada.

Resposta::
A primeira etapa para resolver esse problema é analisar se precisamos 
realmente utilizar um arranjo. Mas antes disso, vamos tentar dividir o problema 
em subproblemas menores para facilitar a elaboração da solução.  


[width="100%",cols="1,3",frame="topbot",options="header"]
|====
| Subproblema| Descrição
| Subproblema 1|Ler 20 notas de uma turma
| Subproblema 2|Calcular a média da turma considerando as 20 notas lidas
| Subproblema 3|Apresentar na tela as notas da turma que estão acima da 
média calculada
|====

O primeiro subproblema é ler 20 notas dos alunos. A princípio conseguiríamos 
ler as 20 notas utilizando um laço de repetição e apenas uma variável. 
Entretanto, se utilizarmos apenas uma variável para ler as notas, só teremos 
a última nota armazenada ao final do laço. Como precisamos de todas as notas 
para saber quais delas estão acima da média calculada, a solução do 
subproblema 3 requer que um vetor seja utilizado ao invés de apenas uma 
variável. Resolveremos, a partir de agora, a questão gradativamente a partir 
das soluções dos subproblemas. Vejamos o trecho de código abaixo que resolve 
o subproblema 1 da questão.

[source,c,numbered]
----
int main() {

	float nota[20];
	int i;

	for (i = 0 ; i < 20 ; i++ )
		scanf("%f", &nota[i]); 
...
----


Como foi explicado, precisaremos de um vetor para armazenar todas as notas da 
turma. Portanto, na linha 3 declaramos um vetor de `float` chamado `notas` com 
20 elementos. Utilizamos a estrutura de repetição `for` para ler as 20 notas 
passadas como entrada para o programa (linha 6 e 7).  

O subproblema 2 consiste em calcular a média das 20 notas lidas. Para isso, 
precisamos primeiramente somar todas as notas lidas. Uma vez que temos essas 
notas armazenadas em um vetor, poderíamos resolver esse subproblema de duas 
maneiras. Uma delas é criar, após o laço de leitura das notas, um outro 
laço para acessar os elementos do vetor para realizar a soma das notas. A 
segunda forma, mais interessante, é somar as notas à medida que forem lidas, 
no mesmo laço de repetição. Dessa forma, teremos apenas um laço de 
repetição, tornando nosso código mais eficiente. Verifiquemos como ficou o 
trecho de código anterior com a inclusão da solução para o subproblema 2.

[source,c,numbered]
----
int main() {

	float nota[20], media, soma = 0;
	int i;

	for (i = 0 ; i < 20 ; i++ ) {
		scanf("%f", &nota[i]); 
		soma += nota[i];
	}

	media = soma / 20;
...
----

Perceba que incluímos na declaração as variáveis `media` e `soma`, para 
armazenar, respectivamente, os valores da média e da soma das notas. Verifique 
também, na linha 8, que a soma das notas é realizada à medida que cada nota 
é lida. O cálculo da média, na linha 11, só pode ser feita depois que todas 
as notas forem lidas e acumuladas na variável `soma`. Desse modo, ela deve 
ficar fora do laço.

O subproblema 3 consiste em apresentar na tela as notas da turma que ficaram 
acima da média. Uma vez que já temos a média calculada, podemos resolver 
facilmente esse problema. Para tanto, precisamos percorrer todo o vetor e 
comparar cada elemento deste com a média. Caso o valor do elemento seja maior 
que a média, ele deve ser apresentado na tela. A versão final do programa 
está descrita abaixo:

[source,c,numbered]
----
int main() {
	float nota[20], media, soma = 0;
	int i;

	for (i = 0 ; i < 20 ; i++) {
		scanf("%f", &nota[i]); 
		soma += nota[i];
	}

	media = soma / 20;

	for (i = 0 ; i < 20 ; i++)
		if (nota[i] > media) 
			printf("%f ", nota[i]);

	return 0;
}
----


As linhas 12 a 14 resolvem o subproblema 3, utilizando o comando `for` para 
percorrer todo o vetor de notas e comparar cada elemento com a média. Para 
realizar tal comparação, utilizamos o comando `if`. Caso o elemento `nota[i]` 
seja maior que a média, ele será exibido na tela.

=== Strings

Na maioria dos programas que implementamos, precisamos lidar com cadeias de 
caracteres no processamento e armazenamento das informações que nos são 
fornecidas. Nas linguagens de programação, essas cadeias são chamadas de 
*((strings))*. Como não há, na linguagem C, um tipo de dados específico para 
representar as strings, utilizamos vetores de elementos do tipo `char` para a 
manipulação de cadeias de caracteres. Em outras palavras, quando queremos 
declarar uma variável para armazenar uma cadeia de caracteres, declaramos um 
vetor do tipo `char`.

No exemplo abaixo, temos a declaração de três strings: `nome`, `logradouro` 
e `bairro`. Perceba que cada `string` é um `array` de `char`. Significa dizer 
que a string `nome` tem a capacidade de armazenar 60 caracteres, a string 
`logradouro` 200 caracteres e a string `bairro` 40 caracteres. 

	char nome[60]; 
	char logradouro[200];
	char bairro[40];

Na linguagem C, toda string tem um caractere especial que determina o seu fim. 
Esse caractere é o `\0`, que significa *((NULO))*, e ele é inserido 
automaticamente pelo compilador no último elemento do vetor de elementos do 
tipo `char`. Por essa razão, deve-se levar isso em consideração na hora de 
declarar suas strings. Assim sendo, se você deseja que uma string armazene `N` 
caracteres, você deve declará-la com um tamanho `N+1`. 

==== Lendo e imprimindo Strings

Para ler e imprimir strings na linguagem C, podemos utilizar as funções 
`scanf()` e `printf()` que já conhecemos. Entretanto, como muitas vezes 
precisamos manipular strings no nosso programa, as linguagens de programação 
possuem funções pré-definidas para serem utilizadas pelo programador, 
facilitando a manipulação das cadeias de caracteres. A linguagem C, por 
exemplo, possui as funções `gets()` e `puts()`, elaboradas especialmente para 
ler e imprimir `strings`, respectivamente. Vejamos um exemplo.

[source,c,numbered]
----
int main() {

	char s[7];

	gets(s);
	puts(s);

	printf("%c", s[4]);
	printf("%c", s[2]);

	return 0; 
}
----


Na linha 3, declaramos uma string `s` que armazena 6 caracteres (além do 
caractere NULO). Em seguida,  utilizamos a função `gets()`,que faz a leitura 
de uma string, esperando que o usuário a digite e tecle ENTER. Na linha 6, 
utilizamos a função `puts()`, que imprime na saída padrão a string `s` 
lida. Digamos que o usuário digite a string `‘BRASIL’`. Dessa forma, a 
cadeia de caracteres será armazenada na memória da seguinte forma:

.Cadeia de caracteres.
image::images/cap4/cadeia_caracteres.eps[scaledwidth="60%"]

Como uma string em C trata-se na verdade de um vetor de caracteres, podemos 
acessá-los individualmente do mesmo modo que acessamos os elementos de um 
vetor qualquer. Ao serem executadas as linhas 8 e 9 do código anterior, por 
exemplo, são exibidos na saída padrão os caracteres ``I'' e ``A'', respectivamente.

==== Manipulando strings

Existem ainda outras funções interessantes para manipular strings na 
linguagem C. A tabela abaixo apresenta algumas dessas funções, todas 
presentes na biblioteca `string.h`.

[width="100%",cols="1m,2",frame="topbot",options="header"]
|======================
|Função|Descrição
|strlen(s)
|Retorna a quantidade de caracteres da string `s`
|strcpy(s1, s2)
|Copia o conteúdo da string `s2` para `s1`
|strcat(s1, s2)
|Concatena (junta) o conteúdo da string `s2` em `s1`
|strchr(s, c)
|Retorna a posição (inteiro) do caractere `c` na string `s`
|======================


Para entender melhor o uso destas funções, considere o exemplo a seguir.


.Código fonte
{gitrepo}/blob/master/livro/capitulos/code/cap4/manipulacao_string.c[code/cap4/manipulacao_string.c]

[source, c,numbered]
----
include::code/cap4/manipulacao_string.c[]
----

Inicialmente declaramos duas strings: `str1` e `str2`. Nas linhas 6 e 7, 
utilizamos o comando `gets()` para que o usuário informe as duas strings que 
serão armazenadas nas variáveis mencionadas. As linhas 9 e 10 imprimem os 
tamanhos das strings `str1` e `str2`, enquanto que a linha 12 é responsável 
por concatenar as strings `str2` e `str1`, ou seja, `str1` passa a ter o 
conteúdo anterior com a adição do conteúdo de str2. Por fim, a linha 13 
exibe o tamanho de `str1` após a sua concatenação com `str2`.

==== Exercício resolvido

ER 4.2:: Escreva um programa que leia uma string e substitua todos os espaços 
por um traço (caractere ``-'').

Resposta::
Primeiramente, declaramos uma string `s` com capacidade para armazenar 40 
caracteres e utilizamos a função `gets()`, na linha 5,  a fim de que o 
usuário digite uma string. Tendo a string digitada armazenada na variável 
`s`, podemos agora manipulá-la. Para resolver essa questão, é importante ter 
entendido o conceito de que uma string é um vetor de caracteres. Na linha 7, 
utilizamos um `for` para percorrer os elementos da string. Veja que a 
condição de parada do comando `for` é `i < strlen(s)`. Isso significa que o 
bloco de instruções será repetido até o final da string, uma vez que 
`strlen()` retorna a quantidade de caracteres de uma string. Dentro do `for`, 
verificamos se o caractere da posição `i` é igual a um espaço. Caso seja, 
esse elemento do array recebe o caractere ``-''. Finalmente, depois do 
comando `for`, utilizamos a função `puts()` para imprimir a nova string com 
os espaços trocados por ``-''.

.Código fonte
{gitrepo}/blob/master/livro/capitulos/code/cap4/resolvido4-2.c[code/cap4/resolvido4-2.c]

[source, c,numbered]
----
include::code/cap4/resolvido4-2.c[]
----

=== Matrizes

Como foi dito no início do capítulo, arranjos podem ter várias dimensões. 
Quando possuem mais de uma dimensão, eles são chamados de *((matrizes))*. O 
conceito de matrizes em programação é bem semelhante ao homônimo da 
matemática. A figura a seguir apresenta o formato de uma matriz `m` x `n`, onde 
`m` é representa o número de linhas e `n` o número de colunas.

.Matriz M x N
image::images/cap4/matriz.eps[scaledwidth="45%"]

Analisemos os exemplos abaixo. A primeira matriz é 3 x 3, pois possui 3 linhas 
e 3 colunas. A segunda matriz é 2 x 3, pois possui 2 linhas e 3 colunas. Se 
quisermos saber o elemento da primeira matriz que possui índice A~2,3~, basta 
seguirmos em direção à  2ª linha e depois em direção à 3ª coluna. Logo 
o valor de A~2,3~ é 1.

.4.5. Exemplos de matrizes
image::images/cap4/matriz-exemplos.eps[scaledwidth="50%"]

Podemos representar essas matrizes na linguagem C acrescentando mais um índice 
entre colchetes no identificador do arranjo. Abaixo temos alguns exemplos de 
como declaramos matrizes:

	int matriz[3][3];
	int outra_matriz[2][3];
	float matriz_de_float[30][20];
	char nomes[10][50];

Na primeira linha temos a declaração de uma matriz de inteiros com 3 linhas e 
3 colunas, na segunda novamente uma matriz de inteiros, só que agora com 2 
linhas e 3 colunas, e na terceira uma matriz de elementos do tipo  `float` com 
30 linhas e 20 colunas.  Agora atenção para última linha. Trata-se da 
declaração de um arranjo de strings. Lembre-se que uma string é um arranjo 
de caracteres. Se declararmos uma matriz de `char`, então teremos na prática 
um vetor de strings, onde cada linha da matriz é uma cadeia de caracteres.

Já sabemos como declarar matrizes, agora aprenderemos a montá-las a partir da 
leitura de dados da entrada padrão. Para isso, precisaremos utilizar dois 
comandos `for` aninhados. Considere o exemplo abaixo:

.Código fonte
{gitrepo}/blob/master/livro/capitulos/code/cap4/matriz_populando.c[code/cap4/matriz_populando.c]

[source, c,numbered]
----
include::code/cap4/matriz_populando.c[]
----

Na linha 2, temos uma declaração de uma matriz 20 x 30. Se quisermos pedir 
para o usuário digitar os valores da matriz, precisaremos utilizar um `for` 
para percorrer as linhas e um `for` para percorrer as colunas da matriz. 
Portanto, na linha 5, temos o primeiro `for` onde `i` irá variar de 0 a 19, 
justamente os índices  que representam a posição dos elementos nas linhas da 
matriz. Na linha 6, temos um outro `for` dentro do primeiro, onde `j` irá 
variar de 0 a 29, que são justamente os índices que representam a posição 
dos elementos nas colunas da matriz. Perceba que quando `i = 0`,  `j` irá 
variar de 0 a 29. Depois `i` passa a valer 1 e novamente o `j` irá variar de 0 
a 29 novamente. Isso acontecerá repetidamente até `i` atingir o valor 19. Em 
suma, o código anterior preenche os elementos da matriz linha por linha. 
Inicia preenchendo a linha de índice 0, em seguida preenche a linha de índice 
1, seguindo de forma sucessiva até que a linha de índice 19 seja preenchida.

=== Recapitulando

Como vimos neste capítulo, arranjos consistem em um conjunto de elementos do 
mesmo tipo, que podem ter diferentes dimensões e são acessados por um 
índice. Os arranjos de uma dimensão são chamados de vetores e quando possuem 
mais de duas dimensões são chamados de matrizes. 

Aprendemos também que strings são cadeias (arranjos) de caracteres, ou seja, 
um vetor de elementos do tipo `char`.  Devido à sua importância para a 
programação de computadores, as linguagens de programação disponibilizam um 
conjunto de funções para facilitar sua manipulação.  Algumas das funções 
mais utilizadas na linguagem C foram conhecidas neste capítulo, contudo, deve 
ficar claro ao leitor que existe um número bem maior de funções com tal 
objetivo. 

=== Exercícios Propostos

1. Crie um programa que armazene números em dois vetores inteiros de cinco 
elementos cada, depois gere e imprima o vetor soma dos dois.

2. Crie um programa que armazene 10 números em um vetor `A`, e gere um vetor 
`B` onde cada elemento é o quadrado do elemento de `A`.
+
Exemplo:
+
....
A[1] = 4   B[1] = 16
A[2] = 3   B[2] = 9
A[3] = 6   B[3] = 36
....

3. Escreva um programa para ler uma string qualquer e exiba as seguintes 
informações: quantidade de caracteres, primeira e última letra.

4. Escreva um programa para ler uma frase de no máximo 70 caracteres e exibir 
a quantidade de vogais dessa frase.

5. Escreva um programa que leia uma string qualquer e mostre-a invertida. 
+
--
Exemplo: 

....
Entrada: casa <ENTER>
Saída: asac
....
--
6. Um palíndromo é uma cadeia de caracteres que representa a mesma palavra 
nos sentidos direto e inverso. Por exemplo, ``asa'' é um palíndromo, porque o 
inverso dela também é ``asa''. Faça um programa que leia uma string e diga 
se esta é ou não um palíndromo.

7. Escreva um programa para ler 9 números inteiros para preencher uma matriz 
`D` 3x3, ou seja, com 3 linhas e 3 colunas (considere que não serão 
informados valores duplicados). A seguir, ler um número inteiro `X` e escrever 
uma mensagem indicando se o valor de `X` existe ou não na matriz `D`.


////
Sempre termine os arquivos com uma linha em branco.
////

